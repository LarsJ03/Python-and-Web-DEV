AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for Flask app deployment using CodePipeline

Parameters:
  GitHubOwner:
    Type: String
    Default: LarsJ03
    Description: GitHub Repository Owner
  GitHubRepo:
    Type: String
    Default: Python-and-Web-DEV
    Description: GitHub Repository Name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub Repository Branch
  GitHubToken:
    Type: String
    NoEcho: true
    Default: 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
    Description: GitHub OAuth Token

Resources:
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ codepipeline.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticbeanstalk:*
                  - ec2:Describe*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                  - iam:PassRole
                Resource: '*'
  # IAM Role for Elastic Beanstalk EC2 Instances
  FlaskAppRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: [ 'sts:AssumeRole' ]
      Path: "/"
      Policies:
        - PolicyName: ElasticBeanstalkEC2Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - s3:Get*
                  - s3:List*
                  - s3:PutObject
                  - cloudwatch:*
                  - elasticbeanstalk:*
                  - autoscaling:*
                  - elasticloadbalancing:*
                Resource: '*'

  FlaskApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      Description: Flask Application

  FlaskAppInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref FlaskAppRole

  FlaskEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !Ref FlaskApplication
      SolutionStackName: '64bit Amazon Linux 2023 v4.0.7 running Python 3.11'
      OptionSettings:
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'IamInstanceProfile'
          Value: !Ref FlaskAppInstanceProfile
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: 'InstanceType'
          Value: 't2.micro'

  FlaskPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ElasticBeanstalk
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ApplicationName: !Ref FlaskApplication
                EnvironmentName: !Ref FlaskEnvironment
              RunOrder: 1

  PipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'

